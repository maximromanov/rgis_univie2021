[
["index.html", "070184 UE Methodological course - Digital Humanities Skills: Intro to GIS (2021S), R Edition Preliminaries", " 070184 UE Methodological course - Digital Humanities Skills: Intro to GIS (2021S), R Edition Maxim G. Romanov 2021-05-03 Preliminaries This is a collection of relevant materials for a DH course by the Department of History, the University of Vienna. Course: 070184 UE Methodological course - Digital Humanities Skills: Intro to GIS (2021S), R Edition u:find Link: https://ufind.univie.ac.at/en/course.html?lv=070184&amp;semester=2021S Meeting time: Tu 11:30-13:00 Meeting place: due to COVID, all meetings will be held online Instructor: Dr. Maxim Romanov, maxim.romanov@univie.ac.at Language of instruction: English Office hours: Tu 13:30-15:00 (on Zoom; please, contact beforehand!) Office: Department of History, Maria-Theresien-Straße 9, 1090 Wien, Room 1.10 "],
["l01-intro.html", "1 L01: Intro 1.1 General Introduction: Making Sure Everything Works; Getting to know R 1.2 Goals{G01} 1.3 Software 1.4 Class 1.5 Starting with our first workbook 1.6 Topics covered 1.7 Reference materials 1.8 Homework{HW01} 1.9 Common issues with homework 1.10 Submitting homework{SH01}", " 1 L01: Intro 1.1 General Introduction: Making Sure Everything Works; Getting to know R 1.2 Goals{G01} Install R and R Studio and start working with them R https://www.r-project.org/ R Studio https://www.rstudio.com/ Get to know R Notebooks (R markdown) 1.3 Software R https://www.r-project.org/ R Studio https://www.rstudio.com/ 1.4 Class R Studio Interface Installing libraries (packages) R Notebook elements: combining prose and code Converting R Notebook into different formats 1.4.1 Installing rmarkdown Instructions here: https://bookdown.org/yihui/rmarkdown/installation.html More information on R Markdown: https://rmarkdown.rstudio.com/lesson-1.html https://bookdown.org/yihui/rmarkdown/ 1.5 Starting with our first workbook Now, download a worksheet file (01_worksheets_familiar-with-r.Rmd.zip). Unzip it and open in RStudio. Let’s work through it! NB: Original worksheets prepared by Lincoln Mullen, GMU (https://dh-r.lincolnmullen.com/worksheets.html) 1.6 Topics covered Values Variables Vectors Built-in functions Using the documentation Data frames Installing and loading packages Simple plots 1.7 Reference materials R Primer (https://dh-r.lincolnmullen.com/primer.html) in: Lincoln A. Mullen, Computational Historical Thinking: With Applications in R (2018–): https://dh-r.lincolnmullen.com. Use the this primer as a quick introduction to the R language, or as a reference for the rest of the course. The original worksheets have been developed by Lincoln Mullen (https://dh-r.lincolnmullen.com/worksheets.html). The ones used in this class might have undergone some changes and relevant adaptations. Your R installation may ‘speak’ your main language. It is nice on one hand, but can be quite inconvenient in class, where the main language is English. You may have to do cast some spells to switch R into English. Possible solutions can be found here: https://stackoverflow.com/questions/13575180/how-to-change-language-settings-in-r/ 1.8 Homework{HW01} Complete the worksheet Getting familiar with R. Generate the results into HTML or PDF (PDF is a little bit trickier). Submit your homework as described below. 1.9 Common issues with homework 1.9.1 Tracing errors Errors happen all the time. You will run into errors when you run your code. You will run into error messages when “knitting” your document — as a result, your document will not be generated. To resolve this: It is important to run each chunk of code separately to ensure that they all work. If any of the chunks throw errors, you will not be able to “knit” your documents. When you run into an error, R Markdown panel (usually in the lower left corner of RStudio interface) will tell you in which line the error occurred. You will need to fix it the same way you would in Step 1. 1.9.2 Comments / “Commenting out” You do not want to constantly keep [re]installing libraries. So, if a library is already installed, you can “comment out” that line. For example, the code chunk above should become: #install.packages(&quot;historydata&quot;) #install.packages(&quot;dplyr&quot;) Adding # in front of a line (or a section of a line) turns it into a comment and it will not longer be executed. 1.9.3 Random errors Think about the following two lines of code. Any issues that you can explain? (You might want to run these lines in R to get some clues) `?median` variable1 &lt;- DigitalHumanities 1.10 Submitting homework{SH01} Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l02-basics-i.html", "2 L02: Basics I 2.1 Basics of R: Data Structures and Subsetting 2.2 Goals 2.3 Software{#02} 2.4 Class 2.5 Topics: Data Structures &amp; Types 2.6 Reference materials 2.7 Homework 2.8 Submitting homework", " 2 L02: Basics I 2.1 Basics of R: Data Structures and Subsetting 2.2 Goals Getting to know main data structures in R 2.3 Software{#02} R https://www.r-project.org/ R Studio https://www.rstudio.com/ 2.4 Class Practice worksheet: 02_worksheets_data-structures.Rmd.zip NB: Original worksheets prepared by Lincoln Mullen, GMU (https://dh-r.lincolnmullen.com/worksheets.html) 2.5 Topics: Data Structures &amp; Types Data structures Vectors Matrices Data frames Lists Subsetting operations 2.5.1 Additional notes str() compactly dysplays information about an R object typeof() determines the internal type or storage mode of an R object class() tells you the data structure of an R object: list data.frame matrix vector numeric typeof() &gt; double — a double-precision vector (floats; default numberic vector type) typeof() &gt; integer — a vector of integers character typeof() &gt; character — a vector of strings/characters Checking class/type &amp; Conversion create test &lt;- c(1,2,3,4,5) is.___ tests whether a variable of a ___ class. or type: check the typeof() our test vector; then try test.ch &lt;- as.character(test) and check the type again; can you convert it back into its initial type?). is.___ converts into a ___ class. (___ is either: vector, matrix, data.frame, list) Now try the following commands and check the type and class of the new objects: test.matrix &lt;- as.matrix(test) test.df &lt;- as.data.frame(test) test.list &lt;- as.list(test) test.vector &lt;- as.vector(test.df$test) 2.6 Reference materials Read two chapters from: Wickham, Hadley. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC, 2019. http://adv-r.had.co.nz/ Data structures Subsetting For the next class, read the following article (in open access, simply follow the link): Broman, Karl W., and Kara H. Woo. 2018. “Data Organization in Spreadsheets.” The American Statistician 72 (1): 2–10. https://doi.org/10.1080/00031305.2017.1375989. Additional readings: Read Introduction to Lincoln A. Mullen, Computational Historical Thinking: With Applications in R (2018–): (http://dh-r.lincolnmullen.com/introduction.html) 2.7 Homework Finish your worksheet and submit your HW as described below. 2.8 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l03-basics-ii.html", "3 L03: Basics II 3.1 Data Manipulation &amp; Exloratory Analysis 3.2 Some comments on the previous lesson homework: 3.3 Goals 3.4 Class 3.5 Topics 3.6 Reference materials 3.7 Homework 3.8 Submitting homework", " 3 L03: Basics II 3.1 Data Manipulation &amp; Exloratory Analysis 3.2 Some comments on the previous lesson homework: 3.2.1 Mess with “attachments” R automatically “attaches” a package when a package is loaded. What this means is that you can simply use a command from that package: like glimpse(your_data_frame), which will give you a glimpse into your dataframe; a potential problem with this approach is that you may load another library that might have the same command — and since the later package will override “attachments,” you may not be aware of (or not pay attention to) the fact that you have lost some old connections. R will warn you about any overriding, but you may miss that. This warning message will look like what you see below. How this can be fixed? An efficient way to avoid this is to use the double-colon operator like this: dplyr::glimpse(your_data_frame) If, out of the sudden, the command that worked before stops working and throws an error at you — this mess with attachments is likely to be the problem. library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union for more details: https://colinfay.me/intro-to-r/packages.html 3.2.2 Vector operations adding two vectors multiplying two vectors v1 &lt;- c(1,2,3,4,5,6) v2 &lt;- c(1,10) v3 &lt;- c(100) 3.2.3 NA Value? Why do you think we need such a value? 3.2.4 many Vs \"many\" What is the difference, from the example below? many &lt;- c(1,2,3,4,5,6,7) length(&quot;many&quot;) ## [1] 1 length(many) ## [1] 7 3.3 Goals Getting to know the basics of working with data: manipulating data, basic techniques of exploratory analysis 3.4 Class 03_worksheets_data-manipulation-introduction.Rmd.zip 04_worksheets_data-manipulation-continued.Rmd.zip NB: Original worksheets prepared by Lincoln Mullen, GMU (https://dh-r.lincolnmullen.com/worksheets.html) 3.5 Topics Selecting columns (select()) Filtering rows (filter()) Creating new columns (mutate()) Sorting columns (arrange()) Split-apply-combine (group_by()) Summarizing or aggregating data (summarize()) Data joining with two table verbs (left_join() et al.) Data reshaping (spread() and gather()) 3.6 Reference materials Consult relevant chapters from: Healy, Kieran Data Visualization: A Practical Guide. Princeton University Press, 2018. ISBN: 978-0691181622. http://socviz.co/ Hadley Wickham &amp; Garrett Grolemund, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly, 2017. ISBN: 978-1491910399. https://r4ds.had.co.nz/ Wickham, Hadley. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC, 2019. http://adv-r.had.co.nz/ 3.7 Homework Finish your worksheets and submit as described below. Additional: if you’d like more practice, you can use swirl library: To install: install.packages(\"swirl\") To run: library(swirl) Then: swirl() 3.8 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l04-basics-iii.html", "4 L04: Basics III 4.1 Data Visualization; Functions 4.2 Goals 4.3 Class 4.4 Topics 4.5 Reference materials 4.6 Homework 4.7 Submitting homework", " 4 L04: Basics III 4.1 Data Visualization; Functions 4.2 Goals Getting to know the basics of data visualization; writing simple functions (reusable, packaged code) 4.3 Class 05_worksheets_ggplot2-introduction-MGR-mod.Rmd.zip 06_worksheets_functions.Rmd.zip 4.4 Topics Basics of using ggplot2 Basic geoms in ggplot2 Histogram Lines Bar plots Faceting Labels Create your own plots Writing your own functions Explanation of functions Function calls Function definition 4.5 Reference materials Consult relevant chapters from: Healy, Kieran Data Visualization: A Practical Guide. Princeton University Press, 2018. ISBN: 978-0691181622. http://socviz.co/ Hadley Wickham &amp; Garrett Grolemund, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly, 2017. ISBN: 978-1491910399. https://r4ds.had.co.nz/ Wickham, Hadley. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC, 2019. http://adv-r.had.co.nz/ 4.6 Homework Finish your worksheets and submit as described below. During the break: Additional I: I strongly recommend that you keep practicing R. You can use the swirl library for this: To install: install.packages(\"swirl\") To run: library(swirl) Then: swirl() Additional courses/tutorials for swirl() can be found at https://swirlstats.com/scn/title.html I would recommend the following ones (in this order): R Programming by Team swirl Getting and Cleaning Data by Team swirl Exploratory Data Analysis by Team swirl Advanced R Programming by Roger Peng (try others as well; there are also some courses in German and Spanish) Additional II: I strongly recommend that you start looking for the GIS-related readings that you will be reviewing You should also start looking for or thinking about the dataset for your final project (if you do not have one) 4.7 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l05-data-i.html", "5 L05: Data I 5.1 Collecting, Organizing, Creating 5.2 Goals 5.3 Software &amp; Other Required Materials 5.4 In Class I: Theoretical and Conceptual 5.5 Ways of obtaining data 5.6 Main format 5.7 Basic principles of organizing data: Tidy Data 5.8 In Class II: Practical 5.9 Morris Dataset: the East Vs. the West 5.10 Viennese Districts 5.11 Reference Materials 5.12 Additional 5.13 Additional Readings 5.14 Homework 5.15 Submitting homework", " 5 L05: Data I 5.1 Collecting, Organizing, Creating 5.2 Goals Getting to know the basics of working with data: collecting, creating, organizing. 5.3 Software &amp; Other Required Materials R OCR Engines (https://www.onlineocr.net/); text editor (for example, Sublime Text) Excel, Google Spreadsheets, or any other alternative (Easy CSV Editor is a great option for Mac) 5.4 In Class I: Theoretical and Conceptual 5.5 Ways of obtaining data Reusing already produced data One may require to mold data into a more fitting structure. Creating one’s own dataset Digitizing data from printed and/or hand-written sources 5.5.1 Using OCR In class we will use an online OCR engine, but you might want to consider using OCR directly in R. For this purpose, R uses library tesseract, which required Tesseract software to be installed on your computer. You can find detailed instructions here (Warning: this part may be a little bit annoying, but Tesseract is a useful software to have and to know how to use.) Here is some R code that should get you started on using Tesseract (For more details, check the information page): Preparations: library(tesseract) #LANGUAGEDATA: &lt;https://github.com/tesseract-ocr/langdata&gt; tesseract_download(&quot;eng&quot;) # this needs to be done only once tesseract_download(&quot;deu&quot;) # this needs to be done only once Converting an image into a text: pngPage &lt;- &quot;Sample_Page_With_Tabular_Data_Morris.png&quot; text &lt;- tesseract::ocr(pngPage, engine = tesseract(&quot;eng&quot;)) readr::write_lines(text, str_replace(pngPage, &quot;.png&quot;, &quot;.txt&quot;)) Converting a PDF into a text: library(pdftools) # for processing PDFs pdfPages &lt;- &quot;Morris_2013_Combined.pdf&quot; pngFile &lt;- pdftools::pdf_convert(pdfPages, dpi = 600) text &lt;- tesseract::ocr(pngFile, engine = eng) readr::write_lines(text, str_replace(pdfPages, &quot;.pdf&quot;, &quot;.txt&quot;)) 5.6 Main format Relational databases or Tables/Spreadsheets (tabular data)? Tabular format: tables; spreadsheets; CSV/TSV files. Unique identifiers: tables with different data can be connected via unique identifiers Note: A relational database (rDB) is a collection of interconnected tables. Tables in an rDB are connected with each other via unique identifiers which are usually automatically created by the database itself when new data is added. One can maintain interconnected tables without creating a rDB: Linked Open Data Example: Table of the growth of cities. One table includes information on population over time; Another table includes coordinates of the cities from the dataset. It is more efficient and practical (reducing error rate from typos) to work on these tables separately, and connect them via unique identifiers of cities which are used in both tables. 5.6.1 Note on the CSV/TSV format CSV stands for comma-separated values; TSV — for tab-separated values. Below is an examples of a CSV format. Here, the first line is the header, which provides the names of columns; each line is a row, while columns are separated with , commas. city,growth_from_2000_to_2013,latitude,longitude,population,rank,state New York,4.8%,40.7127837,-74.0059413,8405837,1,New York Los Angeles,4.8%,34.0522342,-118.2436849,3884307,2,California Chicago,-6.1%,41.8781136,-87.6297982,2718782,3,Illinois Houston,11.0%,29.7604267,-95.3698028,2195914,4,Texas Philadelphia,2.6%,39.9525839,-75.1652215,1553165,5,Pennsylvania TSV is a better option than a CSV, since TAB characters (\\t) are very unlikely to appear in values. Neither TSV not CSV are good for preserving new line characters (\\n)—or, in other words, text split into multiple lines/paragraphs. As a workaround, one can convert \\n into some unlikely-to-occur character combination (for example, ;;;), which would be easy to restore into \\n later, if necessary. 5.7 Basic principles of organizing data: Tidy Data 5.7.1 Tidy Data Each variable is in its own column Each observation is in its own row Each value is in its own cell Source: Wickham, Hadley, and Garrett Grolemund. 2017. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. Sebastopol, CA: O’Reilly UK Ltd. https://r4ds.had.co.nz/; for a Chapter on tidy data, see: https://r4ds.had.co.nz/tidy-data.html. 5.7.2 Clean Data Column names and row names are easy to use and informative. In general, it is a good practice to avoid spaces and special characters. Good example: western_cities Alternative good example: WesternCities Bad example: Western Cities (only the largest) Obvious mistakes in the data have been removed Date format: YYYY-MM-DD is the most reliable format. Any thoughts why? There should be no empty cells: If you have them, it might be that your data is not organized properly. If your data is organized properly, NA must be used as an explicit indication that data point is not available. Each cell must contain only one piece of data. Variable values must be internally consistent Be consistent in coding your values: M and man are different values computationally, but may be the same in the dataset; Keep track of your categories: a document where all codes used in the data set are explained. Preserve original values If you are working with a historical dataset, it might be inconsistent. For example, distances between cities are given in different formats: days of travel, miles, farsaḫs/parasangs, etc.). Instead of replacing original values, it is better to create an additional column, where this information will be homogenized according to some principle. Keeping original data will allow to homogenize data in multiple ways. Clearly differentiate between the original and modified/modelled values. The use of suffixes can be convenient: Distance_Orig vs Distance_Modified. Most of editing operations should be performed in software other than R; any spreadsheet program will work, unless it cannot export into CSV/TSV format. Keep in mind that if you prepare your data in an Excel-like program, rich formatting (like manual highlights, bolds, and italics) is not data and it will be lost, when you export your data into CSV/TSV format. Note: It might be useful, however, to use rule-based highlighting in order, for example, to identify bad values that need to be fixed. Back up your data! http://github.com is a great place for this, plus it allows to work collaboratively as well as to keep track of all changes. Google spreadsheets is a decent alternative for collaborative work, but it lacks version control and detailed tracking of changes. 5.8 In Class II: Practical 5.9 Morris Dataset: the East Vs. the West War-making capacity since 4000 BCE (in social development points). Data source: Morris, Ian. 2013. The Measure of Civilization: How Social Development Decides the Fate of Nations. Princeton: Princeton University Press. 5.9.1 Difficulty: Easy Digitize “War-making capacity since 4000 BCE” from this file Morris_2013_Combined.pdf. Fix the dataset so that it conforms to the principles of tidy data. What should be corrected? Load the data set into R Graph chronological changes in war-making capacities for the East and the West. When the East was in the lead? When the West was in the lead? How can you determine that? (Hint: review logical operators and vector comparison). 5.9.2 Difficulty: More complicated Digitize “Maximum Settlement Sizes” from this file Morris_2013_Combined.pdf. Fix the dataset so that it conforms to the principles of tidy data. What should be corrected? The datasets for the East and the West are separate. What would be your strategies to combine them? Graph chronological changes in war-making capacities for the East and the West. When the East was in the lead? What were the most prominent settlements? When the West was in the lead? What were the most prominent settlements? How can you determine that? (Hint: review logical operators and vector comparison). 5.10 Viennese Districts There is quite a lot of data on Vienna at the Wien Geschichte Wiki Website. Your task will be to collect data on 23 viennese districts: 1) numbers of houses; 2) numbers of inhabitants. This information is available on pages of each district. You can find them at the following links: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23. To get to the data that we need, you will need to click on the link with the actual name of the district. There you will find a detailled description of the district and one of the sections will contain statistics on houses and the inhabitants of the district. Your task will be as follows: to collect this data into tables (CSV files) that will be organizes according to the principles of tidy data; there are 23 districts and 13 students; each one of you will need to collect data on two districts (treat this not as a torture, but as an exercise); please, pick your districts here (write in your name against two districts that you want to pprepare); as always, you are welcome to work collaboratively (there still must be two districts per person though); you are encouraged to use the strategies that we discussed in class and come up with your own (for example, you can carefully retype the data from graphs; but you can also look for the source of this data; both strategies are perfectly fine). in your homework notebook: load the data that you have collected; print out the tables (they are rather small, so print them in full); generate graphs of growth of houses and inhabitants; email CSV files together with your notebooks. 5.11 Reference Materials Wickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10. (The article in open access) Check these slides: A. Ginolhac, E. Koncina, R. Krause. Principles of Tidy Data: tidyr https://lsru.github.io/tv_course/lecture05_tidyr.html (Also check their other lectures/slides: ) Broman, Karl W., and Kara H. Woo. 2018. “Data Organization in Spreadsheets.” The American Statistician 72 (1): 2–10. https://doi.org/10.1080/00031305.2017.1375989. 5.12 Additional Morris, Ian. 2013. The Measure of Civilization: How Social Development Decides the Fate of Nations. Princeton: Princeton University Press. Note: This book is a methodological companion to: Morris, Ian. 2010. Why the West Rules—for Now: The Patterns of History, and What They Reveal about the Future. New York: Farrar, Straus and Giroux. 5.13 Additional Readings Wickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10. (The article in open access) 5.14 Homework Finish the assignment started in class; email report (ideally, as a PDF, since now it will include graphs). Find your own small data set published in a book or an article; digitize it using strategies discussed in class; run some analytical tasks (anything from what you have learned so far); create a report. Email both reports. 5.15 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l06-data-ii.html", "6 L06: Data II 6.1 Modeling &amp; Manipulating 6.2 Goals 6.3 Software 6.4 Additional Materials 6.5 In Class I: Theoretical and Conceptual 6.6 Ways of modeling data: Categorization 6.7 Normalization 6.8 Note: Proxies, Features, Abstractions 6.9 In Class II: Practical 6.10 Bosker et al. Dataset 6.11 Reference Materials 6.12 Additional Readings 6.13 Homework 6.14 Submitting homework", " 6 L06: Data II 6.1 Modeling &amp; Manipulating 6.2 Goals Getting to know the basics of working with data: modeling, manipulating 6.3 Software R Excel, Google Spreadsheets, or any other alternative 6.4 Additional Materials Two excellent books on data visualization with R (both available onlenly online): Kieran Healy. Data Visualization: A Practical Guide, https://socviz.co/. This book is more conceptual and is more of a textbook Everybody should read the first chapter “Look at Data!” (https://socviz.co/lookatdata.html) Rob Kabacoff. Data Visualization with R, https://rkabacoff.github.io/datavis/ This book is more of a reference and a cookbook 6.5 In Class I: Theoretical and Conceptual 6.6 Ways of modeling data: Categorization “[Modeling is] a continual process of coming to know by manipulating representations.” Willard McCarty, “Modeling: A Study in Words and Meanings,” in Susan Schreibman, Ray Siemens, and John Unsworth, A New Companion to Digital Humanities, 2nd ed. (Chichester, UK, 2016), http://www.digitalhumanities.org/companion/. One of the most common way of modeling data in historical research—joining items into broader categories. Categorization is important because it allows to group items with low frequencies into items with higher frequencies, and through those discern patterns and trends. Additionally, alternative categorizations allow one to test different perspectives on historical data. The overall process is rather simple in terms of technological implementation, but is quite complex in terms of subject knowledge and specialized expertise is required to make well-informed decisions. For example, let’s say we have the following categories: baker, blacksmith, coppersmith, confectioner, and goldsmith. These can be categorized as occupations; Additionally, blacksmith, coppersmith, and goldsmith can also be categorized as ‘metal industry’, while baker and confectioner, can be categorized as ‘food industry’; Yet even more, one might want to introduce additional categories, such as luxury production to include items like goldsmith and confectioner; and regular production for items like baker, blacksmith, coppersmith. Such categorizations can be created in two different ways, with each having its advantages: first, one can create them as additional columns. This approach will allow to always have the original—or alternative—classifications at hand, which is helpful for re-thinking classifications and creating alternative ones where items will be reclassified differently, based on a different set of assumptions about your subject. second, these can be created in separate files, which might be easier as one does not have to stare at existing classifications and therefore will be less influenced by them in making new classification decisions. Additionally, one can use some pre-existing classifications that have already been created in academic literature. These most likely need to be digitized and converted into properly formatted data, as we discussed in the previous lesson. 6.7 Normalization This is a rather simple, yet important procedure, which is, on the technical side, very similar to what was described above. In essence, the main goal of normalization is to remove insignificant differences that may hinder analysis. Most common examples would be: bringing information to the same format (e.g., dates, names, etc.) unifying spelling differences The best practice is to preserve the initial data, creating normalized data in separate columns (or tables) 6.8 Note: Proxies, Features, Abstractions These are the terms that refer to the same idea. The notion of proxies is used in data visualization, that of features—in computer science; that of abstractions—in the humanities. The main idea behind these terms is that some simple features of an object can act as proxies to some complex phenomena. For example, Ian Morris uses the size of cities as a proxy to the complexity of social organization. The logic is following: the larger the size of a city, the more complex social, economic and technical organization is required to keep that city functional, therefore is can be used as an indicator of the social complexity. While proxies are selected from what is available—usually not much, especially when it comes to historical data—as a way to approach something more complex, it may be argued that abstractions are often arrived to from the opposite direction. We start with an object which is available in its complexity and we reduce its complexity to a more manageable form which—we expect—would prepresent a particular aspect of the initial complex object. Most commonly this is applied to texts in a natural language. For example, in stylometry texts are reduced to freqiency lists of most frequent features, which are expected to represent an authorial fingerprint. The complexity of texts can be reduced in a number of ways: into a list of lemmas (e.g., for topic modeling analysis), frequency lists (e.g., for document distance comparison), syntactic structures, ngrams, etc. This list is never set and researchers can create multiple abstractions depending on their research questions. 6.9 In Class II: Practical Data for the practical session and homework: Bosker_Data.zip. The data is available in open access and is a supplement to a study (see, Reference Materials). The zipped file includes everything you need for the practical session. Download and unzip (read the article at home!). Note: create a notebook and work through the following questions. Group work is encouraged. Please, explain in one or two sentences what you do in each step, so that your work is also human-readable. Please, submit this notebook as your homework. Make sure to name your file in the following manner: 070184-LXX-HW-YourLastName-YourMatriculationNumber.EXT, where LXX is the number of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number; EXT is the extension of your file — yopu can submit it either as HTML or as a PDF. 6.10 Bosker et al. Dataset Please, provide your answers (a few sentences) and/or working code to the following questions: Describe and provide working R code: Can you figure which file contains data? In which format is data? How can we load it into R? Describe and provide working R code: What is the chronological extent of this data? Describe: [easy-ish] What periods can it be divided into? How can we do that? Describe, provide more than one strategy. (Comment: Sometimes you must be precise, sometimes approximation may be sufficient; also, consider such issues as reliability and availability of data. Is the data that you have reliable? Are necessary values available? Etc.) How can we introduce the following categories into this data: [easy] North Africa and Europe? [a bit more complicated] the Austro-Hungarian Empire? Optional coding When did the Empire had the largest number of cities (based on the data set)? Optional coding When was its population at the highest? [a tad tricky] Christiandom and Islamdom? Optional coding What are the largest cities of Islamdom for each reported period? Optional coding What are the largest western cities of Islamdom between 1000 and 1500 CE? 6.11 Reference Materials Bosker, Maarten, Eltjo Buringh, and Jan Luiten van Zanden. 2012. “From Baghdad to London: Unraveling Urban Development in Europe, the Middle East, and North Africa, 800–1800.” The Review of Economics and Statistics 95 (4): 1418–37. https://doi.org/10.1162/REST_a_00284. Bosker, Maarten, Eltjo Buringh, and Jan Luiten Van Zanden. 2014. “Replication Data for: From Baghdad to London: Unraveling Urban Development in Europe, the Middle East, and North Africa, 800-1800.” Harvard Dataverse. https://doi.org/10.7910/DVN/24747. 6.12 Additional Readings Moretti, Franco. 2007. Graphs, Maps, Trees: Abstract Models for Literary History. London - New York: Verso. Moretti, Franco. 2013. Distant Reading. London ; New York: Verso. Romanov, Maxim G. 2017. “Algorithmic Analysis of Medieval Arabic Biographical Collections.” Speculum 92 (S1): S226–46. https://doi.org/10.1086/693970. 6.13 Homework Bosker et al. Dataset. Finish the practical assignment on the Bosker et al. Dataset. Viennese Dataset Assignments. Collectively, you should now have all the data on Vienna’s districts. Next assignment is as follows: Work together to create one dataset with all the data on houses and inhabitants on Vienna; what would be the best structure for this dataset? Make graphs of the growth of all districts — both, for houses and for inhabitants Make a graph of the growth of Vienna using this data. Here, again, you should have two graphs (two perspectives): one based on the number of houses, and another — on the number of inhabitants. After you have the graph, provide your interpretation (this implies looking for additional information, not simply relying on the graph). Data visualizations: Please, make sure to read Kieran Healy’s “Look at Data!” (https://socviz.co/lookatdata.html) Using what you have learned in the chapter, take a close look at the following datasets (given in the order of increasing size and complexity) and think about how they can be visualized. The main goal is to come up with verbal descriptions of how this data can be visualized and what you may expect to learn from these visualizations. You are, of course, welcome to generate those visualizations. Again, group work is encouraged — brainstorming is particularly good for this task. historydata::early_colleges europop::europop historydata::us_cities_pop Note: you can put everything in one notebook. Do not forget to send me your work! 6.14 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l07-gis-i.html", "7 L07: GIS I 7.1 Georeferencing &amp; Geocoding 7.2 Georeferencing 7.3 Georeferencing maps without a grid 7.4 Geocoding 7.5 Reverse Geocoding 7.6 Homework 7.7 Submitting homework", " 7 L07: GIS I 7.1 Georeferencing &amp; Geocoding 7.1.1 Goals Learning about what georeferencing and geocoding are. Learning how to do georeferencing and geocoding. 7.1.2 Software QGIS, https://qgis.org/ R 7.1.3 Additional Materials QGIS tutorials in Mapping for Historians: http://transnationalhistory.net/mapping/tutorials/ specifically on georeferencing: http://transnationalhistory.net/mapping/tutorials/georeferencing/ More general QGIS Tutorials: http://www.qgistutorials.com/en/index.html Additionally, see tutorials on Programming Historian in the section mapping: https://programminghistorian.org/en/lessons/?topic=mapping Clifford, Jim, Josh MacFadyen, and Daniel Macfarlane. 2013. “Installing QGIS 2.0 and Adding Layers.” Programming Historian, December. https://programminghistorian.org/lessons/qgis-layers. Clifford, Jim, Josh MacFadyen, and Daniel Macfarlane. 2013. “Georeferencing in QGIS 2.0.” Programming Historian, December. https://programminghistorian.org/lessons/georeferencing-qgis. 7.2 Georeferencing Georeferencing can be defined as a process of associating digital images (pictures of a maps) with locations in physical space. What we do in this process is projecting an image of a map on geographical coordinate system. After this process of projection or association is complete, objects on georeferenced maps acquire geographical coordinates, which can be harvested for use in other projects. 7.2.1 QGIS QGIS must be installed and running. Note: Interfaces might differ from system to system; the same applies to different versions of QGIS. Before we proceed, you may want to add Google Layers. To Add Google maps layer: (on the left pane, Browser) XYZ &gt; New connection &gt; paste one of the following links (Source: https://geogeek.xyz/how-to-add-google-maps-layers-in-qgis-3.html): Google Maps: https://mt1.google.com/vt/lyrs=r&amp;x={x}&amp;y={y}&amp;z={z} Google Satellite: http://www.google.cn/maps/vt?lyrs=s@189&amp;gl=cn&amp;x={x}&amp;y={y}&amp;z={z} Google Satellite Hybrid: https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z} Google Terrain: https://mt1.google.com/vt/lyrs=t&amp;x={x}&amp;y={y}&amp;z={z} Google Roads: https://mt1.google.com/vt/lyrs=h&amp;x={x}&amp;y={y}&amp;z={z} NB: Images of maps to work with below 7.2.2 Step-by-step instructions Let’s georeference this old map of Europe. Here is the link: OldDesignShop_MapCentralEurope.jpg. In your XYZ Tiles, double click on any Google layer that you added (or on OpenStreetMap) A layer should be added to the main map (see, Layer pane) Open Georeferencer: Raster &gt; Georeferencer if you do not see it there, it must be activated first: Plugins &gt; Manage and Install Plugins... &gt; [search for georeferencer], then tick a box against Georeferencer GDAL In Georeferencer: File &gt; Open Raster (also the first button on the main panel) Choose a file. Lets start with OldDesignShop_MapCentralEurope.jpg (this one has a grid, so it will be easier to process) In Coordinate Reference System Selector, choose WGS 84 / Pseudo-Mercator, then clock OK Open Settings &gt; Transformation settings (or click the yellow gears button) Choose settings like on the screenshot below (you can also change Compression setting, which will generate a smaller map-image): Important! Make sure to select EPSG:4326 - WGS 84 in Target SRS. (If your map is tiny and appears somewhere in the Atlantic ocean near the coast of West Africa, you have selected a wrong target Spatial Reference System!) Now, adding georeference points: If you have a grid, it is very easy: just type in coordinates If you don’t, it is tricky: you need to find the same features on the image and on the map (for this, click on From Map Canvas) [!!!] Ideally, if you know projection of the map, you only need a few points; this almost never happens, so, the more points you create, the more precisely your image will be georeferenced. This is easy when you have a grid. When you are done with collecting points, click on PLAY button (green triangle) The image of your georeferenced map should appear in the main window. [!!!] Keep in mind that you add layers to your map and a layer on top may cover the layer below! Below you can see how a georeferences map would look, if only 4 points GCP (ground reference points) have been collected. In the areas circled with red you can see that the northern par of the UK and Denmark are not very well aligned. In the example below you the georeferences map has about a dozen GCP. Alignment of the northern part of the UK and Denmark is much better. In general, if you have a clear coordinate grid on your maps, you may want to georeference all intersections—this will give you the best possible results. In general, this procedure can be extremely helpful if: you need to collect geographical information from historical maps; you want to use some historical map as the base layer for mapping your data; 7.3 Georeferencing maps without a grid You may have a map that does not have any grid. In this case you will have to georeference your map by visual cues. The steps are the same as above, but instead of typing in the coordinates, you will need to identify the same visual features on the map that you georeference (your source map) and the base layer map loaded into QGIS (your target map). First, you click on the selected feature on your source map. Then, click on “From Map Canvas” Then, find the same feature on the target map and click there — the GCP will be automatically created. For for our practice we will use the following old map of Vienna (Source: David Ramsey Map Collection) In my attempt, I just picked three points in the 1st district: Burgtor, Schottentor, and Domkirche St. Stephan. The results are not too bad, but if you look closer areas outside of the 1st district are not well aligned. In cases you need data from such a map, you will need to collect as many points as possible. For better transformation results, these points also should be distributed evenly across the surface of your source map and at the same time evenly distanced from each other — like a grid. 7.3.1 Collecting Point Data (Very Simple Way) Create a CSV file; copy/paste the content from below (six lines of text!) city,state,lon,lat Warsaw,Russia,21.13066,52.23914 Berlin,Germany,13.38309,52.54312 Hamburg,Germany,9.98335,53.54092 Vienna,Austria-Hungary,16.39089,48.27847 Budapest,Austria-Hungary,19.05326,47.50452 In QGIS, load this file by: Layer &gt; Add Layer &gt; Add Delimited Text Layer Settings should look like on the screenshor below CSV (comma separated format) Point coodinates (X field: lon; Y field: lat) Geometry CRS: EPSG:4326 - WGS 84 / Pseudo Mercator (you will have only two lines of data, instead of five) Make sure to click Add when you are done! * The layer is there, but we need to add labels to see the cities * Right-click on the layer &gt; Properties * On the tab Labels change the settings like on the screenshot below * Click Apply, then OK. * You should see several cities on the map now: * If nothing appears, try: Right-click on the layer &gt; Set CRS &gt; Set Layer CRS: Choose WGS 84 / Pseudo-Mercator * Now, we can use Coordinate Capture plugin to collect data from our georeferenced map: * If activated, coordinarte capture should be visible in lower right corner * To activate coordinate capture: Plugins &gt; Manage and Install Plugins... &gt; [search for coordinate capture], then tick a box against Coordinate Capture * You might still need to do: Vector &gt; Coordinate Capture to make it appear. Collecting coordinates: Keep the initial CSV open in some editor; In Coordinate Capture, click Start capture; Click on any point on the map &gt; coordinates of that location will appear in the plugin; Choose the top coordinates (see image above), click on an icon to the right of the coordinates to copy them; Go back to the open CSV: Add a new line: Type the name of the city; Add comma and type the name of the country (alternatively, just add another comma if you want to keep it empty); Now, paste what you copied into Clipboard (this will add a set of coordinates) Save the file Back in QGIS: Newly-added city must appear on the map. (if not, try to switch the layer off and on.) Repeat, until all required data is collected. 7.4 Geocoding Geocoding is a process through which we obtain coordinates of places for which we know only names. The code below takes information that we provide and sends a request to some geocoding service, which—if matches are found—returns results. Geocoding is a simple way to collect coordinates for locations that you have. As you will see in the code below, you will need the name of the place and the name of the country to get matches. Historians, however, should be very careful with this approach, since it works reliably only for the current modern data. (Important: you should always read documnetation for packages that you use in order to understand better what you can and cannot do with it.) We wil need the following libraries: library(tidyverse) library(tidygeocoder) Now we need to build a simple table with some data. tribble function builds a tibble row by row. The first row is column names, then we can add values in lines that follow (splitting into lines is for visual readability). dynasties &lt;- tribble( ~name, ~city, ~country, ~dynasty, &quot;Dimašq&quot;,&quot;Damascus&quot;, &quot;Syria&quot;, &quot;Umayyads&quot;, &quot;Baġdād&quot;, &quot;Baghdad&quot;, &quot;Iraq&quot;, &quot;Abbasids&quot;, &quot;Naysābūr&quot;, &quot;Nishapur&quot;, &quot;Iran&quot;, &quot;Tahirids&quot;, &quot;Qurṭubaŧ&quot;, &quot;Cordoba&quot;, &quot;Spain&quot;, &quot;Spanish Umayyads&quot;, &quot;al-Qāhiraŧ&quot;, &quot;Cairo&quot;, &quot;Egypt&quot;, &quot;Mamluks&quot;, &quot;Buḫārá&quot;, &quot;Bukhara&quot;, &quot;Uzbekistan&quot;, &quot;Samanids&quot;) Now, the following line calls the function geocode (from tidygeocoder) and tries to get all the relevant data from Open Street Maps (osm). You can check the page of the library for more detials: https://jessecambon.github.io/2020/07/15/tidygeocoder-1-0-0.html. dynasties_locations &lt;- dynasties %&gt;% tidygeocoder::geocode(city = city, country = country, method = &#39;osm&#39;, full_results = TRUE, custom_query= list(extratags = 1)) dynasties_locations ## # A tibble: 6 x 40 ## name city country dynasty lat long place_id licence osm_type osm_id ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Dima… Dama… Syria Umayya… 33.5 36.3 1.08e7 Data ©… node 1.09e9 ## 2 Baġd… Bagh… Iraq Abbasi… 33.3 44.4 2.60e8 Data ©… relation 5.64e6 ## 3 Nays… Nish… Iran Tahiri… 36.2 58.8 2.59e8 Data ©… relation 9.52e6 ## 4 Qurṭ… Cord… Spain Spanis… 37.9 -4.78 2.59e8 Data ©… relation 3.43e5 ## 5 al-Q… Cairo Egypt Mamluks 30.0 31.2 2.59e8 Data ©… relation 5.47e6 ## 6 Buḫā… Bukh… Uzbeki… Samani… 39.8 64.4 1.02e8 Data ©… way 4.56e7 ## # … with 30 more variables: boundingbox &lt;list&gt;, display_name &lt;chr&gt;, ## # class &lt;chr&gt;, type &lt;chr&gt;, importance &lt;dbl&gt;, icon &lt;chr&gt;, ## # extratags.is_in &lt;chr&gt;, extratags.capital &lt;chr&gt;, extratags.wikidata &lt;chr&gt;, ## # extratags.wikipedia &lt;chr&gt;, extratags.is_capital &lt;chr&gt;, ## # extratags.population &lt;chr&gt;, extratags.place &lt;chr&gt;, ## # extratags.linked_place &lt;chr&gt;, `extratags.capital_ISO3166-1` &lt;chr&gt;, ## # extratags.website &lt;chr&gt;, extratags.ele &lt;chr&gt;, `extratags.ref:ine` &lt;chr&gt;, ## # `extratags.ref:whc` &lt;chr&gt;, extratags.heritage &lt;chr&gt;, ## # `extratags.idee:name` &lt;chr&gt;, `extratags.whc:criteria` &lt;chr&gt;, ## # `extratags.ine:municipio` &lt;chr&gt;, `extratags.population:date` &lt;chr&gt;, ## # `extratags.heritage:operator` &lt;chr&gt;, ## # `extratags.whc:inscription_date` &lt;chr&gt;, extratags.rank &lt;chr&gt;, ## # extratags.border_type &lt;chr&gt;, `extratags.left:province` &lt;chr&gt;, ## # `extratags.right:province` &lt;chr&gt; dynasties_locations_filtered &lt;- dynasties_locations %&gt;% select(name, city, country, lat, long) knitr::kable(dynasties_locations_filtered) name city country lat long Dimašq Damascus Syria 33.51307 36.309581 Baġdād Baghdad Iraq 33.30243 44.378799 Naysābūr Nishapur Iran 36.21059 58.792280 Qurṭubaŧ Cordoba Spain 37.88458 -4.776014 al-Qāhiraŧ Cairo Egypt 30.04439 31.235726 Buḫārá Bukhara Uzbekistan 39.76755 64.423133 To check whether results are any go, we can use the following code to generate a very simple map. (We will get into details of how to build beautiful maps in the next lessons.) library(ggplot2) require(maps) library(ggrepel) Here is a sample code to build a very simple map: ggplot(dynasties_locations, aes(x = long, y = lat)) + borders(&#39;world&#39;) + geom_label_repel(aes(label = name), force = 2, segment.alpha = 0) + geom_point() + theme_void() 7.5 Reverse Geocoding In reverse geocoding we start with coordinates and are trying to get more data on what is there at these cordinates. There is a library revgeo (https://github.com/mhudecheck/revgeo) that we can use for this purpose. This procedure may be convenient to check whether certain coordinates are within the borders of a specific country or not; this, however, again works only for the current, and not for historical data. NB: there is a little glitch with the library, as it sends requests to an URL that is no longer in use. This can be fixed by using this script. Dowload it, unzip it and add it to your code with the following line: pathToRevGeo &lt;- &quot;path/to/the/script/on/your/computer/revgeo.R&quot; source(pathToRevGeo) Now, we can try to get information about a place: revgeo(longitude=16.3637029, latitude=48.2155248, provider = &#39;photon&#39;, output=&#39;frame&#39;) [1] &quot;Getting geocode data from Photon: https://photon.komoot.io/reverse?lon=16.3637029&amp;lat=48.2155248&quot; housenumber street city state zip country 1 11 Maria-Theresien-Straße Wien State Not Found 1090 Österreich 7.6 Homework Finish georeferencing maps: map of Europe (easy); map of Vienna (intermeddiate-hard); add these screenshots of your georeferenced maps to your homework notebook; Collect data on major cities in Austro-Hungary and add them to the map in QGIS; send me a screenshot of completed map; print out the table in the notebook; include the screenshot in the notebook; Geocode 10-15 cities that you have visited in your life; print out the table with those places; generate a simple map with them (use the map as a means to check whether georeferencing worked correctly); Submit your notebook. 7.7 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l08-gis-ii.html", "8 L08: GIS II 8.1 Creating Base Maps 8.2 Core concepts and teir practical implementations 8.3 Homework 8.4 Submitting homework", " 8 L08: GIS II 8.1 Creating Base Maps Projections; examples; https://thetruesize.com/ Understanding main map components: layers of points, lines, polygons and rasters Construct a base map, step by step. adding main layers customizing map with additional goodies saving maps Examples of maps: Europe Islamic world provinces PS: Maps as Art: Vienna 8.1.1 Goals … 8.1.2 Software R 8.1.3 Additional Materials … 8.2 Core concepts and teir practical implementations 8.2.1 Projection Issues See, https://en.wikipedia.org/wiki/List_of_map_projections. Website https://thetruesize.com/ is a nice tool for demonstrating how projection affects our perceprion of reality. On te following two screenshots you can see how the “sizes” of Russia (~17,1 mln km2) and China (c. 9,6 mln. km2) change when they change places. 8.2.2 A Digital Map: Layers of Goodness Layers: Analytical Layer Our Data Annotation/Legend Social Geography Political Boundaries Settlements, etc. Physical Geography Types of surface (raster) Continents / Coastal Line Elevation profile (raster) Rivers, Lakes, etc. Base Layer: Graticule 8.2.3 Main Types of Data: Points, Lines, Polygons SOURCE: There are 3 types of vector objects: points, lines or polygons. Each object type has a different structure. Image Source: Colin Williams (NEON), via: www.earthdatascience.org Analytical Layers: Our Data Points: item1, x[1], point(lat, lon)[2]; item2, x[1], point(lat, lon)[2]; item3, x[1], point(lat, lon)[2]; … itemX, x[1], point(lat, lon)[2]; Lines: line1, x[1], {from(lat, lon)[2], to(lat, lon); from(lat, lon)[2], to(lat, lon); from(lat, lon)[2], to(lat, lon); … from(lat, lon)[2], to(lat, lon);}[2] … lineX … Polygons: polygon1, x, area(lat1, lon1; lat2, lon2; … latX, lonX; … lat1, lon1)[2] … polygonX … Annotation/Legend [1] where x is a categorical parameter; [2] lat/lon: decimal coordinates (not DMS) 8.2.4 Getting some libraries install.packages(c(&quot;cowplot&quot;, &quot;googleway&quot;, &quot;ggplot2&quot;, &quot;ggrepel&quot;, &quot;ggspatial&quot;, &quot;libwgeom&quot;, &quot;sf&quot;, &quot;rnaturalearth&quot;, &quot;rnaturalearthdata&quot;, &quot;rnaturalearthhires&quot;)) install.packages(&quot;raster&quot;, &quot;rgdal&quot;) 8.2.5 Getting some data Terrain Rasters: … (Source: https://www.naturalearthdata.com/); Actually, let’s skip on these tey are rather tricky with R. In most cases, you do not really need raster layers: raster data is usually very large in size and is too robust, which will only obscure what you want to highlight on your map; if you are convinced that you do need to use raster data, see: https://datacarpentry.org/r-raster-vector-geospatial/; also: https://geocompr.robinlovelace.net/adv-map.html Water bodies: (Source: https://www.naturalearthdata.com/) Cities: (Source: https://simplemaps.com/data/world-cities) … ? 8.2.6 Creating the Base Map library(tidyverse) library(sf) ## Linking to GEOS 3.8.1, GDAL 3.1.4, PROJ 6.3.1 Let’s load the first base layer of geographical data: library(rnaturalearth) library(rnaturalearthdata) world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) So, here is our base map. Something is missing… theme_set(theme_bw()) xlim=c(-12,80); ylim=c(10,50) ggplot(data = world) + geom_sf(fill=&quot;white&quot;, color=&quot;white&quot;) + coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) + theme(panel.background = element_rect(fill = &quot;grey90&quot;)) Let’s try to add rivers… and the Aral Sea, which almost completely disappeared in the past 40 years of so. For this, we will need to get relevant data files—most likely in shape format used in GIS applications like ArcGIS and QGIS. Googling usually works for finding relevant data. Files for the Aral Sea: http://www.marineregions.org/gazetteer.php?p=details&amp;id=4281. Working with shape files is a bit tricky and we need some extra steps to convert shape files into something that R understands, namely, dataframes. library(rgdal) # R wrapper around GDAL/OGR ## Loading required package: sp ## rgdal: version: 1.5-23, (SVN revision 1121) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.2.1, released 2020/12/29 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/rgdal/gdal ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 7.2.1, January 1st, 2021, [PJ_VERSION: 721] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.0/Resources/library/rgdal/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.4-5 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(&quot;rgdal_show_exportToProj4_warnings&quot;=&quot;none&quot;) before loading rgdal. ## Overwritten PROJ_LIB was /Library/Frameworks/R.framework/Versions/4.0/Resources/library/rgdal/proj library(ggmap) # for fortifying shapefiles (converting GIS files into data frames) ## Google&#39;s Terms of Service: https://cloud.google.com/maps-platform/terms/. ## Please cite ggmap if you use it! See citation(&quot;ggmap&quot;) for details. ## ## Attaching package: &#39;ggmap&#39; ## The following object is masked from &#39;package:tidygeocoder&#39;: ## ## geocode NB: We need ggmap library, because it has a function—fortify()—that converts GIS data (*.shp files) into data frames with which R works. If you try to install ggmap library, you will most likely get an error, as the CRAN ggmap version is for an older version of R; we can try to install the latest version directly from the developer. Such practice has its advantages and disadvantages, keep this in mind! ggmap developer version is hosted at https://github.com/dkahle/ggmap. #install.packages(&quot;devtools&quot;) #devtools::install_github(&quot;dkahle/ggmap&quot;) #library(ggmap) # for fortifying shapefiles Now, let’s read in the shapefile, using the path to the shapefile and the shapefile name minus the extension as arguments. Keep in mind, that the first argument—the path—should not have the trailing /. (See, readOGR) First, download the following two files and unzip them (change paths to files if necessary!): layer.riverData.zip layer.aral_sea.zip # Rivers rivers &lt;- readOGR(&quot;./data_temp/layer.riverData&quot;, &quot;ne_50m_rivers_lake_centerlines&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/romanovienna/Dropbox/6_Teaching_New/_rgis_course/rgis_univie2021_draft/data_temp/layer.riverData&quot;, layer: &quot;ne_50m_rivers_lake_centerlines&quot; ## with 462 features ## It has 32 fields ## Integer64 fields read as strings: ne_id ## Warning in readOGR(&quot;./data_temp/layer.riverData&quot;, ## &quot;ne_50m_rivers_lake_centerlines&quot;): Dropping null geometries: 461 rivers_df &lt;- fortify(rivers) # adding the Aral sea -- historical basin aral_sea &lt;- readOGR(&quot;./data_temp/layer.aral_sea&quot;, &quot;worldglwd1&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/Users/romanovienna/Dropbox/6_Teaching_New/_rgis_course/rgis_univie2021_draft/data_temp/layer.aral_sea&quot;, layer: &quot;worldglwd1&quot; ## with 1 features ## It has 28 fields aral_sea_df &lt;- fortify(aral_sea) ## Regions defined for each Polygons Let’s try to save these as rData objects (*.rds) and load them, instead of preprocessing shape files everytime, which may take a while. Loading RDS files is just a jiffy. Keep in mind, that you can save any data into RDS file! This might be particularly valuable for storing intermediate results that you do not want to regenerate too often. RDSfolder = &quot;./data_temp/map.objects/&quot; saveRDS(rivers_df, paste0(RDSfolder,&quot;rivers_df.rds&quot;)) saveRDS(aral_sea_df, paste0(RDSfolder,&quot;aral_sea_df.rds&quot;)) rivers_df &lt;- readRDS(paste0(RDSfolder,&quot;rivers_df.rds&quot;)) aral_sea_df &lt;- readRDS(paste0(RDSfolder,&quot;aral_sea_df.rds&quot;)) You can now comment out code in shape_data chunk and saveRDS() lines in RDS_files chunk. The entire script will work much faster this way. waterColor = &quot;lightsteelblue2&quot; # &quot;grey90&quot; xlim=c(-12,80); ylim=c(10,50) ggplot(data = world) + geom_sf(fill=&quot;white&quot;, color=&quot;white&quot;) + # rivers and the aral sea geom_path(data = rivers_df,aes(x = long, y = lat, group = group), color = waterColor, size = .2) + geom_polygon(data = aral_sea_df,aes(x = long, y = lat, group = group), color = waterColor, fill = waterColor, size = .2) + # map limits and theme coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) + theme(panel.background = element_rect(fill = waterColor)) Let’s add a scale bar. This we can do with the library ggspatial (location parameters are as follows: tl, tr, bl and br — for top left, top right, bottom left, and bottom right). library(&quot;ggspatial&quot;) ## Warning: package &#39;ggspatial&#39; was built under R version 4.0.2 xlim=c(-12,80); ylim=c(10,50) ggplot(data = world) + geom_sf(fill=&quot;white&quot;, color=&quot;white&quot;) + # rivers and the aral sea geom_path(data = rivers_df,aes(x = long, y = lat, group = group), color = waterColor, size = .2) + geom_polygon(data = aral_sea_df,aes(x = long, y = lat, group = group), color = waterColor, fill = waterColor, size = .2) + # annotation scale annotation_scale(location = &quot;bl&quot;, width_hint = 0.25) + annotation_north_arrow(location = &quot;bl&quot;, which_north = &quot;true&quot;, pad_x = unit(0.0, &quot;in&quot;), pad_y = unit(0.2, &quot;in&quot;), style = north_arrow_fancy_orienteering) + # map limits and theme coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) + theme(panel.background = element_rect(fill = waterColor), axis.title.y=element_blank(), axis.title.x=element_blank()) ## Scale on map varies by more than 10%, scale bar may be inaccurate For convenience, some of this information can be stored into variables for easy reuse: baseplot &lt;- ggplot(data = world) + geom_sf(fill=&quot;white&quot;, color=&quot;white&quot;) + # rivers and the aral sea geom_path(data = rivers_df,aes(x = long, y = lat, group = group), color = waterColor, size = .2) + geom_polygon(data = aral_sea_df,aes(x = long, y = lat, group = group), color = waterColor, fill = waterColor, size = .2) + # annotation scale annotation_scale(location = &quot;bl&quot;, width_hint = 0.25) + annotation_north_arrow(location = &quot;bl&quot;, which_north = &quot;true&quot;, pad_x = unit(0.0, &quot;in&quot;), pad_y = unit(0.2, &quot;in&quot;), style = north_arrow_fancy_orienteering) + # map limits and theme coord_sf(xlim = xlim, ylim = ylim, expand = FALSE) themeParameters &lt;- theme(panel.background = element_rect(fill = waterColor), axis.title.y=element_blank(), axis.title.x=element_blank()) Now we can build the same map with just this: baseplot + themeParameters ## Scale on map varies by more than 10%, scale bar may be inaccurate Let’s add some data. You can download this dataset with cities of the world. library(ggrepel) library(readr) worldcities &lt;- read_csv(&quot;files/L11_worldcities.csv&quot;) ## Parsed with column specification: ## cols( ## city = col_character(), ## city_ascii = col_character(), ## lat = col_double(), ## lng = col_double(), ## country = col_character(), ## iso2 = col_character(), ## iso3 = col_character(), ## admin_name = col_character(), ## capital = col_character(), ## population = col_double(), ## id = col_double() ## ) # xlim=c(-12,80); ylim=c(10,50) wc_filtered &lt;- worldcities %&gt;% filter(between(lat, 10, 50), between(lng, -12, 80)) %&gt;% filter(!is.na(population)) top_cities &lt;- worldcities %&gt;% filter(between(lat, 10, 50), between(lng, -12, 80)) %&gt;% filter(!is.na(population)) %&gt;% top_n(10, wt = population) baseplot + geom_point(data = wc_filtered, aes(x=lng, y=lat, size=population), alpha = 0.5, col=&quot;grey&quot;) + scale_size(range=c(0.01, 2)) + geom_point(data = top_cities, aes(x=lng, y=lat), col=&quot;black&quot;, size=1) + geom_text_repel(data = top_cities, aes(x=lng, y=lat, label = city), force = 2, segment.alpha = 0) + themeParameters ## Scale on map varies by more than 10%, scale bar may be inaccurate 8.3 Homework … Submit your knitted notebook. 8.4 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l09-gis-iii.html", "9 L09: GIS III 9.1 Mapping Categorical Data 9.2 Homework 9.3 Submitting homework", " 9 L09: GIS III 9.1 Mapping Categorical Data Coming soon 9.1.1 Goals … 9.1.2 Software R 9.1.3 Additional Materials … … 9.2 Homework … Submit your knitted notebook. 9.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l10-gis-iv.html", "10 L10: GIS IV 10.1 Mapping Networks 10.2 Homework 10.3 Submitting homework", " 10 L10: GIS IV 10.1 Mapping Networks Coming soon 10.1.1 Goals … 10.1.2 Software R 10.1.3 Additional Materials … … 10.2 Homework … Submit your knitted notebook. 10.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l11-gis-v.html", "11 L11: GIS V 11.1 GIS without Maps 11.2 Homework 11.3 Submitting homework", " 11 L11: GIS V 11.1 GIS without Maps Coming soon 11.1.1 Goals … 11.1.2 Software R 11.1.3 Additional Materials … … 11.2 Homework … Submit your knitted notebook. 11.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l12-pojects-i.html", "12 L12: Pojects I 12.1 Preparing Data 12.2 Homework 12.3 Submitting homework", " 12 L12: Pojects I 12.1 Preparing Data Coming soon 12.1.1 Goals … 12.1.2 Software R 12.1.3 Additional Materials … 12.2 Homework … Submit your knitted notebook. 12.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l13-pojects-ii.html", "13 L13: Pojects II 13.1 Choosing Suitable Methods 13.2 Homework 13.3 Submitting homework", " 13 L13: Pojects II 13.1 Choosing Suitable Methods Coming soon 13.1.1 Goals … 13.1.2 Software R 13.1.3 Additional Materials … 13.2 Homework … Submit your knitted notebook. 13.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l14-pojects-iii.html", "14 L14: Pojects III 14.1 Interpreting Results 14.2 Homework 14.3 Submitting homework", " 14 L14: Pojects III 14.1 Interpreting Results Coming soon 14.1.1 Goals … 14.1.2 Software R 14.1.3 Additional Materials … 14.2 Homework … Submit your knitted notebook. 14.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["l15-final-presentations.html", "15 L15: Final Presentations 15.1 Presenting Your Work 15.2 Homework 15.3 Submitting homework", " 15 L15: Final Presentations 15.1 Presenting Your Work Coming soon 15.1.1 Goals … 15.1.2 Software R 15.1.3 Additional Materials … 15.2 Homework … Submit your knitted notebook. 15.3 Submitting homework Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070184-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the numnber of the lesson for which you submit homework; YourLastName is your last name; and YourMatriculationNumber is your matriculation number. "],
["misc-i-reading-assignments.html", "MISC I: Reading Assignments How to complete the Reading-Reporting Assignments Preparing and Submitting Your Reports Suggested Monographs", " MISC I: Reading Assignments How to complete the Reading-Reporting Assignments Reading-Reporting Assignments: one of your tasks will be to identify relevant readings (articles, book sections), read them, and provide short summaries (250-500 words) in the shared Zotero library for our course. You need to submit 5 such short summaries for full credit. “Relevant” means that these readings must be relevant to your own research interests. Ideally, you will use these readings as an additional background for your final projects. Some readings will be suggested, but I would encourage you to invest some time into this task and find your own readings (which is now very easy with such available resources as JSTOR). Preparing and Submitting Your Reports You will need Zotero for this task: Download and install Zotero from https://www.zotero.org/; Make sure to create an account and login into your accout both online and in Zotero; Send me your user name so that I could add you to our group library in Zotero; Make sure to install a browser connector into the browser of your choice (Chrome and Firefox are the best choices); You can use this link: https://www.zotero.org/download/connectors Alternatively, in Zotero, go toTools &gt; Install browser connector The browser connector will allow you to add publications automatically into Zotero from websites that you visit. This is very convenient to collect bibliography (and often automatically download PDFs, if they are available). In order to download bibliographical data and PDFs into your Zotero from JSTOR (and some other similar kind of libraries), you need to know a couple of things: you need to be logged in via your university account; otherwise you will not have access to PDFs; you need to download the first PDF by manually clicking download button: it is ask you to agree to terms and conditions; after that you can use the browser connector button. in Zotero: collect publications on GIS that are relevant to your interests; please, do spend some time looking for publications that are relevant to your interests. Do not grab the first things that you find. Use this as an opportunity to learn something new and interesting. The publications do not have to be from your field, whichever it is, but rather on a method or a case study that is likely to be applicable to your research area. skim through what you have collected: check the structure; read intros and conclusions; skim through the rest; based on this pre-reading, pick the most interesting 5 pieces; read them carefully and write your summaries, which must include the following: briefly: what is the article about? what GIS methods and technologies have been used in the study? Any specific software that should be mentioned? what are the findings? specifically, what did GIS allow to discover versus other non-GIS methods? what are the most interesting (i.e., most relevant to your interests) aspects of the study? the volume should be 250-500 words NB: you can write these summaries in any editor. When you are ready to submit them, you should do so by adding a Note to a specific publication and copy/paste your summary into that note. Sharing your summaries: in the rgis2021 group library in Zotero, create your own subcollection, which must be named Firstname Lastname - YOUMATRICNUMBER; paste your records — with notes containing your summaries — into your folder; let me know that you are done :) Suggested Monographs Check the References page for a list of suggested monographs; those also can be found in our group library rgis2021 available through Zotero. "],
["syllabus.html", "Syllabus Course Details Course Evaluation Class Participation Homework Assignments Final Project Practice worksheets (R Notebooks) Study materials Software, Tools, &amp; Technologies Schedule Lesson Topics Additional", " Syllabus Course: 070184 UE Methodological course - Digital Humanities Skills: Intro to GIS (2021S), R Edition u:find Link: https://ufind.univie.ac.at/en/course.html?lv=070184&amp;semester=2021S Meeting time: Tu 11:30-13:00 Meeting place: due to COVID, all meetings will be held online Instructor: Dr. Maxim Romanov, maxim.romanov@univie.ac.at Language of instruction: English Office hours: Tu 13:30-15:00 (on Zoom; please, contact beforehand!) Office: Department of History, Maria-Theresien-Straße 9, 1090 Wien, Room 1.10 Course Details u:find Link: https://ufind.univie.ac.at/en/course.html?lv=070184&amp;semester=2021S Meeting time: Tu 11:30-13:00 Meeting place: due to COVID, all meetings will be held online Aims, contents and method of the course GIS, which stands for geographical information system(s), has become an important tool of a historian — to the point that scholars in many humanities disciplines talk about “spatial turns.” Indeed, GIS allows us as historians to pay much closer attention to the spatial dimension in studying the past. To begin with, creating maps became so much easier now. Yet, more importantly, we can now map our data to understand spatial distribution of different phenomena — and how this distribution changed over time; we can map data representing different phenomena and study how they may have affected each other; we can map connections and study how physical space affects the formation of networks; and so much more. This course will focus on the use of the programming language R which shines when it comes to data analysis and creating robust visualizations. The course will consist of three main parts. Part I will introduce you to the basics of R and its philosophy of “tidy data.” Part II will focus on specific methods and techniques of spatial analysis. Part III will require you to focus on your own research projects. The language of the course is English. Assessment and permitted materials Assessment will be based on class participation, homework assignments, and a final project (final projects can be prepared either individually or in groups; ideally, your final project should be directly connected to research projects that you carry out for other courses or for your BA, MA, or PhD theses). Minimum requirements and assessment criteria No prior programming experience is required, but familiarity with the command line and basic principles of programming will be beneficial. Course Evaluation Course evaluation will be a combination of in-class participation (30%), weekly homework assignments (50%), and the final project (20%). Class Participation Attendance is required; regular participation is the key to completing the course; all students must come with their laptops; homework assignments must be submitted on time (some can be completed later as a part of the final project, but this must be discussed with the instructor whenever the issue arises); the final project must be submitted on time. Homework Assignments Homework assignments are due before the beginning of the following class; You will need to complete your worksheet and generate HTML or PDF document with the results, which you then submit to the instructor as attachments via email; In the subject of your email, please, use the following format: CourseID-LessonID-HW-Lastname-matriculationNumber, for example, if I were to submit homework for the first lesson, my subject header would look like: 070184-L01-HW-Romanov-12435687. DH is a collaborative field, so you are most welcome to work on your homework assignments in groups, however: you must still submit it. That is, if a groups of three works on one assignment, there must be three separate submissions emailed from each member’s email. Reading-Reporting Assignments: one of your tasks will be to identify relevant readings (articles, book sections), read them, and provide short summaries (250-500 words) in the shared Zotero library for our course. You need to submit 5 such short summaries for full credit. “Relevant” means that these readings must be relevant to your own research interests. Ideally, you will use these readings as an additional background for your final projects. Some readings will be suggested, but I would encourage you to invest some time into this task and find your own readings (which is now very easy with such available resources as JSTOR). NB: For most classes you will need to complete and submite worksheets. Some questions in those worksheets will be easy, but some you might find to be difficult and even impossible. We will go over the difficult parts of each worksheet in class, so do not worry. The main goal is to practice, since for most students this course will be very new and very strange. In practical terms this means that you need to to submit your worksheet in time with your best try for each question. The worksheets will be graded by completion, i.e. you will get full credit if you: 1) complete all the easy and moderately difficult questions; 2) give an honest try to the very difficult questions; 3) ask for help in class and/or office hours to make sure that you understand the challenges. Final Project The final project is your own research project that uses collections of texts of your interest and research methods introduced inthe course. You are encouraged to explore methods outside of those covered within the course. Ideally, your research project should be directly related to your main research project that you undertake in your studies. You are welcome to work in groups on your final projects, but make sure to discuss that with the instructor first. Practice worksheets (R Notebooks) 01_worksheets_familiar-with-r.Rmd.zip 02_worksheets_data-structures.Rmd.zip 03_worksheets_data-manipulation-introduction.Rmd.zip 04_worksheets_data-manipulation-continued.Rmd.zip 05_worksheets_ggplot2-introduction-MGR-mod.Rmd.zip 06_worksheets_functions.Rmd.zip NB: Worksheets 1-6 have beed developed by Lincoln Mullen. Source: Lincoln A. Mullen, Computational Historical Thinking: With Applications in R (2018–): http://dh-r.lincolnmullen.com. Study materials Necessary materials will be provided. The following list includes valuable resources on R: Arnold, Taylor, and Lauren Tilton. Humanities Data in R. New York, NY: Springer Science+Business Media, 2015. Healy, Kieran Data Visualization: A Practical Guide. Princeton University Press, 2018. ISBN: 978-0691181622. http://socviz.co/. Hadley Wickham &amp; Garrett Grolemund, R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. O’Reilly, 2017. ISBN: 978-1491910399. https://r4ds.had.co.nz/. Wickham, Hadley. Advanced R, Second Edition. 2 edition. Boca Raton: Chapman and Hall/CRC, 2019. http://adv-r.had.co.nz/. Also check https://bookdown.org/ for more books on R. Software, Tools, &amp; Technologies The main tools for the course will be the programming language R and RStudio, the premier integrated development environment for R. R: https://cloud.r-project.org/ (choose the version for your operating system!) RStudio: https://rstudio.com/products/rstudio/download/ (RStudio Desktop, Open Source License — the free version) We will also use a variety of packages: swirl https://swirlstats.com/ knitr https://yihui.name/knitr/ R markdown https://rmarkdown.rstudio.com/, https://bookdown.org/yihui/rmarkdown/ Additionally, bookdown https://bookdown.org/, https://bookdown.org/yihui/bookdown/ tidyverse https://www.tidyverse.org/ ggplot2 https://ggplot2.tidyverse.org/ Tutorial: http://r-statistics.co/ggplot2-Tutorial-With-R.html Useful cookbook: http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html ggvis https://ggvis.rstudio.com/, https://ggvis.rstudio.com/ggvis-basics.html shiny https://shiny.rstudio.com/ Schedule Location: Hörsaal 30 Hauptgebäude, 1.Stock, Stiege 7; due to COVID, all meetings will be held online via video-conferencing Tuesday 02.03. 11:30 - 13:00 Tuesday 09.03. 11:30 - 13:00 Tuesday 16.03. 11:30 - 13:00 Tuesday 23.03. 11:30 - 13:00 2-WEEK BREAK 2-WEEK BREAK Tuesday 13.04. 11:30 - 13:00 Tuesday 20.04. 11:30 - 13:00 Tuesday 27.04. 11:30 - 13:00 Tuesday 04.05. 11:30 - 13:00 Tuesday 11.05. 11:30 - 13:00 Tuesday 18.05. 11:30 - 13:00 Tuesday 01.06. 11:30 - 13:00 Tuesday 08.06. 11:30 - 13:00 Tuesday 15.06. 11:30 - 13:00 Tuesday 22.06. 11:30 - 13:00 Tuesday 29.06. 11:30 - 13:00 Lesson Topics [ #01 ] General Introduction: Making Sure Everything Works; Getting to know R [ #02 ] Basics I: Data Structures and Subsetting [ #03 ] Basics II: Data Manipulation &amp; Exploratory Analysis [ #04 ] Basics III: Data Visualization; Functions [ ### ] 2-WEEK BREAK: swirl tutorials @ home [ ### ] 2-WEEK BREAK: swirl tutorials @ home [ #05 ] Data I: Collecting, Organizing, Creating [ #06 ] Data II: Modeling &amp; Manipulating === GIS METHODS === [ #07 ] GIS Methods I: Georeferencing (with QGIS) and Geocoding (with R) [ #08 ] GIS Methods II: Creating Base maps: Points, Vectors, Polygons [ #09 ] GIS Methods III: Mapping Categorical Data [ #10 ] GIS Methods IV: Mapping Networks [ #11 ] GIS Methods V: GIS without Maps === DEVELOPING FINAL PROJECTS === [ #12 ] Projects I [ #13 ] Projects II [ #14 ] Projects III [ #15 ] Final Presentations Note: one of the classes might be canceled; this will be announced separately. Lesson materials will be appearing on the website shortly before each class. Lessons will be accessible via the Lessons link on the left panel. Additional Datasets Library of Congress: [DATA] 25 mln book records: http://www.loc.gov/cds/products/MDSConnect-books_all.html Miriam Posner (UCLA): [DATA] collection of datasets: http://miriamposner.com/classes/dh201w19/final-project/datasets/ class materials: http://miriamposner.com/classes/dh201w19/ Lincoln Mullen (George Mason U): [DATA] historydata R-package: https://lincolnmullen.com/software/historydata/ Computational Historical Thinking, https://dh-r.lincolnmullen.com/ "],
["references.html", "References", " References Baker, Alan R. H. 2003. Geography and History: Bridging the Divide. Cambridge Studies in Historical Geography 36. Cambridge, U.K. ; New York: Cambridge University Press. Bodenhamer, David J., John Corrigan, and Trevor M. Harris, eds. 2010. The Spatial Humanities: GIS and the Future of Humanities Scholarship. Spatial Humanities. Bloomington: Indiana University Press. ———, eds. 2015. Deep Maps and Spatial Narratives. The Spatial Humanities. Bloomington: Indiana University Press. Gregory, Ian N. 2013. Troubled Geographies: A Spatial History of Religion and Society in Ireland. The Spatial Humanities. Bloomington ; Indianapolis: Indiana University Press. Gregory, Ian N., and A. Geddes, eds. 2014. Toward Spatial Humanities: Historical GIS and Spatial History. The Spatial Humanities. Bloomington: Indiana University Press. Gregory, Ian, Donald A. DeBats, and Donald Lafreniere, eds. 2018. The Routledge Companion to Spatial History. London ; New York: Routledge Taylor &amp; Francis Group. Gregory, Ian, and Paul S. Ell. 2007. Historical GIS: Technologies, Methodologies, and Scholarship. Cambridge Studies in Historical Geography 39. Cambridge ; New York: Cambridge University Press. Knowles, Anne Kelly, ed. 2014. Geographies of the Holocaust. The Spatial Humanities. Bloomington: Indiana University Press. Lünen, Alexander von. 2013. History and GIS: Epistemologies, Considerations and Reflections. Dordrecht [u.a.]: Springer. Terpstra, Nicholas, and Colin Rose, eds. 2016. Mapping Space, Sense, and Movement in Florence: Historical GIS and the Early Modern City. Routledge Research in Digital Humanities. London ; New York: Routledge,Taylor &amp; Francis Group. Ye, Xinyue, and Hui Lin. 2020. Spatial Synthesis: Computational Social Science and Humanities. https://doi.org/10.1007/978-3-030-52734-1. "]
]
